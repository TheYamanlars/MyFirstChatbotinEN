Source IBM 
Import required tools from the transformers library, choose and fetch the model
Step 2: Import our required tools from the transformers library
For this example, you will be using AutoTokenizer and AutoModelForSeq2SeqLM from the transformers library.

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

Add the step into the chatbot.py Python file.

Step 3: Choosing a model
Choosing the right model for your purposes is an important part of building chatbots! You can read on the different types of models available on the Hugging Face website: https://huggingface.co/models.

LLMs differ from each other in how they are trained. Let's look at some examples to see how different models fit better in various contexts.

Text generation:
If you need a general-purpose text generation model, consider using the GPT-2 or GPT-3 models. They are known for their impressive language generation capabilities.
Example: You want to build a chatbot that generates creative and coherent responses to user input.

Sentiment analysis:
For sentiment analysis tasks, models like BERT or RoBERTa are popular choices. They are trained to understand the sentiment and emotional tone of text.
Example: You want to analyze customer feedback and determine whether it is positive or negative.

Named entity recognition:
LLMs such as BERT, GPT-2, or RoBERTa can be used for Named Entity Recognition (NER) tasks. They perform well in understanding and extracting entities like person names, locations, organizations, etc.
Example: You want to build a system that extracts names of people and places from a given text.

Question answering:
Models like BERT, GPT-2, or XLNet can be effective for question-answering tasks. They can comprehend questions and provide accurate answers based on the given context.
Example: You want to build a chatbot that can answer factual questions from a given set of documents.

Language translation:
For language translation tasks, you can consider models like MarianMT or T5. They are designed specifically for translating text between different languages.
Example: You want to build a language translation tool that translates English text to French.

However, these examples are very limited and the fit of an LLM may depend on many factors such as data availability, performance requirements, resource constraints, and domain-specific considerations. It's important to explore different LLMs thoroughly and experiment with them to find the best match for your specific application.

Other important purposes that should be taken into consideration when choosing an LLM include (but are not limited to):

Licensing: Ensure you are allowed to use your chosen model the way you intend
Model size: Larger models may be more accurate, but might also come at the cost of greater resource requirements
Training data: Ensure that the model's training data aligns with the domain or context you intend to use the LLM for
Performance and accuracy: Consider factors like accuracy, runtime, or any other metrics that are important for your specific use case
To explore all the different options, check out the available models on the Hugging Face website.

For this example, you'll be using facebook/blenderbot-400M-distill because it has an open-source license and runs relatively fast.

model_name = "facebook/blenderbot-400M-distill"


Add this step into your chatbot.py python file.

Step 4: Fetch the model and initialize a tokenizer
When running this code for the first time, the host machine will download the model from Hugging Face API.
However, after running the code once, the script will not re-download the model and will instead reference the local installation.

You'll be looking at two terms here: model and tokenizer.

In this script, you initiate variables using two handy classes from the transformers library:

model is an instance of the class AutoModelForSeq2SeqLM, which allows you to interact with your chosen language model.
tokenizer is an instance of the class AutoTokenizer, which optimizes your input and passes it to the language model efficiently. It does so by converting your text input to “tokens”, which is how the model interprets the text.

# Load model (download on first run and reference local installation for consequent runs)
model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)